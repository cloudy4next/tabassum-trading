<?php

namespace App\Http\Controllers;

use IceAxe\NativeCloud\App\Controller\IceAxeController;
use IceAxe\NativeCloud\App\Field\Button;
use IceAxe\NativeCloud\App\Field\Column;
use IceAxe\NativeCloud\App\Field\Field;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Http\Request;
use App\Models\{{model}};
use App\Http\Requests\{{requestName}};
use App\Services\{{model}}Service;
use IceAxe\NativeCloud\Facades\NativeCloudFacade as Grid;



class {{model}}Controller extends IceAxeController
{
    private const STORE_ROUTE = '{{modelLow}}.store';
    private const UPDATE_ROUTE = '{{modelLow}}.update';

    private {{model}}Service ${{modelLow}}Service;

    public function __construct({{model}}Service ${{modelLow}}Service)
    {
        Grid::setModel('\App\Models\{{model}}');
        $this->{{modelLow}}Service = ${{modelLow}}Service;
    }


    public function setup(): Builder
    {
        return $this->{{modelLow}}Service->getData();
    }

    public function index()
    {
        $this->initGrid();
        return view('home.{{modelLow}}.list');
    }

    public function CustomButton(): array
    {
        return [
            Button::init(Button::NEW)->setRoute('{{modelLow}}.create'),
            Button::init(Button::EDIT)->setRoute('{{modelLow}}.edit'),
            Button::init(Button::DELETE)->setRoute('{{modelLow}}.delete'),
        ];
    }

    public function filters(): array
    {
        return [
            {{filtersField}}
        ];
    }

    public function  listOperation(): array
    {
        return [
           {{listOperationColumns}}
        ];
    }

    public function setComponentData($id): array
    {
        return [];
    }

    public function createOperation(): array
    {
        return [
            {{createOperationField}}
        ];
    }

    public function create()
    {
        $this->configureForm(self::STORE_ROUTE);
        return view('home.{{modelLow}}.create');
    }

    public function store({{requestName}} $request)
    {
        $this->{{modelLow}}Service->store($request);
        return redirect('{{modelLow}}')->with('success', '{{model}} Created Successfully');
    }

    public function update({{requestName}} $request)
    {
       $this->{{modelLow}}Service->update($request);
       return redirect('{{modelLow}}')->with('success', '{{model}} Updated Successfully');
    }

    public function delete($id)
    {
        $this->{{modelLow}}Service->delete($id);
        return redirect('{{modelLow}}')->with('success', '{{model}} Deleted Successfully');
    }

    public function edit(int $id)
    {
        $data = $this->{{modelLow}}Service->edit($id);
        $this->initEdit($data, self::UPDATE_ROUTE);
        return view('home.{{modelLow}}.edit');
    }
}
